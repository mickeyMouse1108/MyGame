#include "TestBatchedTextured.h"

#include "imgui.h"
#include "NumTypes.h"

namespace Test
{
    TestBatchedTextured::TestBatchedTextured()
    {
        float vertices[(2 + 2 + 1) * 4 * 2] =
        {   -240.0f, -80.0f,    0.0f, 0.0f, 0,
            -80.00f, -80.0f,    1.0f, 0.0f, 0,
            -80.00f, +80.0f,    1.0f, 1.0f, 0,
            -240.0f, +80.0f,    0.0f, 1.0f, 0,
      
            +80.00f, -80.0f,    0.0f, 0.0f, 1,
            +240.0f, -80.0f,    1.0f, 0.0f, 1,
            +240.0f, +80.0f,    1.0f, 1.0f, 1,
            +80.00f, +80.0f,    0.0f, 1.0f, 1,
        };
        
        unsigned int indices[6 * 2] = {
            0, 1, 2,  2, 3, 0,
            4, 5, 6,  6, 7, 4
        };
        
        va = new Graphics::VertexArray();
        vb = new Graphics::VertexBuffer(vertices, (2 + 2 + 1) * 4 * 2 * sizeof(float));

        Graphics::VertexBufferLayout layout;
        layout.Push<float>(2);
        layout.Push<float>(2);
        layout.Push<float>(1);
        va->AddBuffer(*vb, layout);

        ib = new Graphics::IndexBuffer(indices, 12);

        projection = Maths::Matrix3D::OrthoProjection(-320.0f, 320.0f, -240.0f, 240.0f, -1.0f, 1.0f);
        //LOG(*mat);
        // because i couldn't get rc files working and 
        // dlls/libs dont pack things like pngs into itself, im using these bytes instead
        uchar tex0[] = {
            0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
            0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x08,0x02,0x00,0x00,0x00,0xfc,0x18,0xed,
            0xa3,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x00,0xae,0xce,0x1c,0xe9,0x00,0x00,
            0x00,0x04,0x67,0x41,0x4d,0x41,0x00,0x00,0xb1,0x8f,0x0b,0xfc,0x61,0x05,0x00,0x00,
            0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0e,0xc3,0x00,0x00,0x0e,0xc3,0x01,0xc7,
            0x6f,0xa8,0x64,0x00,0x00,0x00,0xaa,0x49,0x44,0x41,0x54,0x48,0x4b,0xed,0x94,0xdb,
            0x0e,0x80,0x20,0x0c,0x43,0xc1,0xff,0xff,0x67,0x9c,0xb4,0x4c,0x65,0x46,0xbc,0x4d,
            0x63,0xc2,0x79,0x50,0xda,0x41,0xb6,0xb1,0x68,0x4c,0x29,0x05,0x4f,0x06,0xbe,0xdd,
            0x70,0x4f,0x10,0xe4,0x8a,0xec,0x2d,0x3d,0xe8,0xac,0x66,0x10,0xe3,0x2c,0xb1,0xb6,
            0x4f,0x1b,0x85,0x03,0xac,0x73,0xee,0x8a,0xe4,0x3c,0xa0,0xce,0xd0,0x2a,0x26,0x45,
            0x91,0xe7,0x12,0x48,0x75,0x80,0x3a,0x53,0x39,0x90,0x02,0xe4,0x33,0x43,0xd6,0x7a,
            0x2d,0x4c,0xa0,0x4d,0xe9,0xe2,0x20,0xd8,0xaf,0xf5,0x0a,0x70,0xc0,0x24,0x97,0x31,
            0x0f,0x3e,0xfa,0x0e,0x96,0xdc,0x8c,0xba,0x77,0xc0,0x19,0x60,0x20,0x55,0x39,0x6a,
            0x5e,0x88,0x2a,0xee,0x1d,0xfc,0x27,0x81,0x5c,0x14,0xa0,0x2e,0xfc,0xa7,0x03,0x19,
            0x32,0xa0,0x2e,0xf4,0x21,0x37,0xe9,0x09,0x9a,0xf4,0x04,0x4d,0x56,0xbf,0xeb,0x4d,
            0x64,0x03,0xa2,0xd5,0x57,0xaa,0xe6,0xfe,0xd9,0xb7,0x3a,0xf0,0xc3,0xb9,0x83,0x10,
            0x46,0x2f,0x2f,0x8d,0x22,0x1e,0x9e,0x1c,0x53,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,
            0x44,0xae,0x42,0x60,0x82
        };
        uchar tex1[] = {
            0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
            0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x08,0x02,0x00,0x00,0x00,0xfc,0x18,0xed,
            0xa3,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x00,0xae,0xce,0x1c,0xe9,0x00,0x00,
            0x00,0x04,0x67,0x41,0x4d,0x41,0x00,0x00,0xb1,0x8f,0x0b,0xfc,0x61,0x05,0x00,0x00,
            0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0e,0xc3,0x00,0x00,0x0e,0xc3,0x01,0xc7,
            0x6f,0xa8,0x64,0x00,0x00,0x00,0xaa,0x49,0x44,0x41,0x54,0x48,0x4b,0xed,0x95,0xdd,
            0x0e,0x80,0x20,0x08,0x85,0xb5,0xf7,0x7f,0x67,0x23,0x0f,0x52,0x89,0xf9,0xb3,0x89,
            0x5b,0x9b,0xdf,0x45,0x79,0x8e,0x3a,0x40,0x96,0xf9,0x10,0x82,0xb3,0xe4,0xe0,0xb7,
            0x19,0xe6,0x01,0x1c,0x1d,0x91,0x3e,0xa5,0x89,0xce,0xab,0x07,0xde,0xdf,0x12,0x63,
            0xfd,0xd4,0xb3,0x70,0x80,0x76,0xc6,0x8e,0x88,0xf6,0x03,0xd6,0x11,0xb6,0x92,0xc9,
            0x22,0xc9,0xb1,0x00,0x94,0x1d,0x60,0x1d,0xc9,0x1c,0x48,0x02,0x72,0x4e,0x93,0x25,
            0x5f,0x0d,0x07,0x90,0xa2,0x64,0xd0,0x09,0xd6,0x4b,0xbe,0x04,0x1c,0x70,0xc9,0xe7,
            0x9c,0x05,0xe6,0xdf,0x01,0x57,0x80,0x72,0x8a,0xd0,0x02,0xcc,0x66,0xb5,0x8a,0x59,
            0xdf,0xbb,0xaa,0x02,0xa1,0x9e,0x2c,0x24,0xc8,0x2a,0xf8,0x9a,0x35,0xaf,0x60,0x07,
            0x68,0x32,0x16,0x80,0x5a,0x87,0xee,0xf5,0xb3,0x7b,0xd0,0x64,0x07,0x68,0xb2,0x03,
            0x34,0x19,0xb8,0xae,0x8b,0xc8,0x75,0x5d,0x64,0xc5,0x75,0xfd,0xf7,0x9f,0xbe,0x73,
            0x27,0x78,0xed,0x81,0x35,0x83,0x0d,0x52,0x89,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,
            0x44,0xae,0x42,0x60,0x82
        };

        textures[0] = new Graphics::Texture(tex0, sizeof(tex0) / sizeof(uchar), false);
        textures[1] = new Graphics::Texture(tex1, sizeof(tex1) / sizeof(uchar), false);
        textures[0]->Bind(0);
        textures[1]->Bind(1);

        shader = new Graphics::Shader(
            "#shader vertex\n"
            "#version 330 core\n"
            "layout(location = 0) in vec4 position;\n"
            "layout(location = 1) in vec2 texCoord;\n"
            "layout(location = 2) in float textureID;\n"
            "out vec2 v_TexCoord;\n"
            "flat out int v_index;\n"
            "uniform mat4 u_MVP;\n"
            "void main(){\n"
            "    gl_Position = u_MVP * position;\n"
            "    v_TexCoord = texCoord;\n"
            "    v_index = int(textureID);\n"
            "}\n"
            "#shader fragment\n"
            "#version 330 core\n"
            "layout(location = 0) out vec4 color;\n"
            "in vec2 v_TexCoord;\n"
            "flat in int v_index;\n"
            "uniform sampler2D u_Texture[2];\n"
            "void main(){\n"
            "    vec4 texColor = texture(u_Texture[v_index], v_TexCoord);\n"
            "    color = texColor;\n"
            "}"
        );
        shader->Bind();
        
        shader->SetUniformMatrix4x4("u_MVP", projection);
        int ids[2] = { 0, 1 };
        shader->SetUniform1IVec("u_Texture", ids, 2);

        va->Unbind();
        vb->Unbind();
        ib->Unbind();
        shader->Unbind();

        modelTranslation = {0.0f, 0.0f, 0.0f};
        modelScale       = {1.0f, 1.0f, 1.0f};
        modelRotation    = {0.0f, 0.0f, 0.0f};
    }

    TestBatchedTextured::~TestBatchedTextured()
    {
        delete va;
        delete vb;
        delete ib;
        delete shader;
        delete textures[0];
        delete textures[1];
    }

    void TestBatchedTextured::OnUpdate(float deltaTime)
    {
        Test::OnUpdate(deltaTime);
    }

    void TestBatchedTextured::OnRender(Graphics::Renderer& renderer)
    {
        Test::OnRender(renderer);
        shader->Bind();
        //shader.SetUniform4F("u_Color", color);
        Maths::Matrix3D mat = Maths::Matrix3D::Transform(modelTranslation,
                                                         modelScale,
                                                         modelRotation);
        //LOG(mat);
        shader->SetUniformMatrix4x4("u_MVP", projection * mat);
        shader->Unbind();
        
        renderer.Draw(*va, *ib, *shader);
    }

    void TestBatchedTextured::OnImGuiRender()
    {
        Test::OnImGuiRender();
        
        ImGui::DragFloat3("Translation", modelTranslation);
        ImGui::DragFloat3("Scale",       modelScale      , 0.1f);
        ImGui::DragFloat3("Rotation",    modelRotation   , 0.03f);
    }
}
